import{_ as s,c as a,o as n,a as e}from"./app.59ae87fb.js";const A=JSON.parse('{"title":"Type Assertions","description":"","frontmatter":{},"headers":[{"level":2,"title":"TypeScript 中的类型断言介绍","slug":"typescript-中的类型断言介绍","link":"#typescript-中的类型断言介绍","children":[]},{"level":2,"title":"另一种类型断言语法","slug":"另一种类型断言语法","link":"#另一种类型断言语法","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"advanced-types/type-assertions.md"}'),l={name:"advanced-types/type-assertions.md"},p=e(`<h1 id="type-assertions" tabindex="-1">Type Assertions <a class="header-anchor" href="#type-assertions" aria-hidden="true">#</a></h1><p>摘要：在本教程中，你将学习 TypeScript 中的类型断言。</p><h2 id="typescript-中的类型断言介绍" tabindex="-1">TypeScript 中的类型断言介绍 <a class="header-anchor" href="#typescript-中的类型断言介绍" aria-hidden="true">#</a></h2><p>类型断言指示 TypeScript 编译器将一个值作为一个指定的类型。它使用 as 关键字来做到这一点。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">expression </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">targetType</span></span>
<span class="line"></span></code></pre></div><p><strong>类型断言也称为类型缩小。它允许你从<a href="./../basis-types/union-type.html">联合类型</a>中缩小类型</strong>。让我们看下面这个简单的函数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getNetPrice</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">price</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">discount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">format</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">netPrice</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">price</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> (</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">discount</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">format</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">netPrice</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">netPrice</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>getNetPrice()</code> 函数接受 <code>price</code>、<code>discount</code> 和 <code>format</code> 参数，并返回一个 <code>number | string</code> 的联合类型的值。</p><p>如果 <code>format</code> 为 <code>true</code>，<code>getNetPrice()</code> 返回一个格式化的字符串净价。否则，它返回净价为一个数字。</p><p>下面使用 <code>as</code> 关键字来指示编译器，分配给 <code>netPrice</code> 的值是一个字符串：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> netPrice </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getNetPrice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.05</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(netPrice)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>输出：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">$95</span></span>
<span class="line"></span></code></pre></div><p>类似地，下面使用 <code>as</code> 关键字来指示编译器，<code>getNetPrice()</code> 函数的返回值是一个数字：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> netPrice </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getNetPrice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.05</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(netPrice)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>输出：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">95</span></span>
<span class="line"></span></code></pre></div><p><strong>请注意，一个类型断言并不带有任何<a href="./type-casting.html">类型转换</a>。它只是告诉编译器应该将哪种类型应用于值，以进行类型检查。</strong></p><h2 id="另一种类型断言语法" tabindex="-1">另一种类型断言语法 <a class="header-anchor" href="#另一种类型断言语法" aria-hidden="true">#</a></h2><p>你也可以使用尖括号语法&lt;&gt;来断言一个类型，像这样：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">&lt;</span><span style="color:#FFCB6B;">targetType</span><span style="color:#A6ACCD;">&gt; value</span></span>
<span class="line"></span></code></pre></div><p>例如：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> netPrice </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> &lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;">&gt;</span><span style="color:#82AAFF;">getNetPrice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.05</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>注意，<strong>你不能在某些库中使用尖括号语法 <code>&lt;&gt;</code></strong>，例如 React。出于这个原因，你应该使用 <code>as</code> 关键字进行类型断言。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>类型断言指示编译器将一个值视为指定的类型。</li><li>类型断言不进行任何类型转换。</li><li>类型断言使用 <code>as</code> 关键字或尖括号 <code>&lt;&gt;</code> 语法。</li></ul>`,26),o=[p];function t(c,r,i,y,C,F){return n(),a("div",null,o)}const d=s(l,[["render",t]]);export{A as __pageData,d as default};

import{_ as s,c as a,o as n,a as e}from"./app.59ae87fb.js";const C=JSON.parse('{"title":"TypeScript any type","description":"","frontmatter":{},"headers":[{"level":2,"title":"TypeScript any 类型的介绍","slug":"typescript-any-类型的介绍","link":"#typescript-any-类型的介绍","children":[]},{"level":2,"title":"TypeScript any：隐式类型","slug":"typescript-any-隐式类型","link":"#typescript-any-隐式类型","children":[]},{"level":2,"title":"TypeScript any vs. object","slug":"typescript-any-vs-object","link":"#typescript-any-vs-object","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"basis-types/any-type.md"}'),p={name:"basis-types/any-type.md"},l=e(`<h1 id="typescript-any-type" tabindex="-1">TypeScript any type <a class="header-anchor" href="#typescript-any-type" aria-hidden="true">#</a></h1><p>摘要：在本教程中，你将了解 TypeScript 的 <code>any</code> 类型以及如何在你的代码中<strong>正确使用它</strong>。</p><h2 id="typescript-any-类型的介绍" tabindex="-1">TypeScript any 类型的介绍 <a class="header-anchor" href="#typescript-any-类型的介绍" aria-hidden="true">#</a></h2><p>有时，你可能需要在一个变量中存储一个值。<strong>但在编写程序时，你不知道它的类型</strong>。而这个未知的值可能来自第三方 API 或用户输入。</p><p>在这种情况下，你想选择不进行类型检查，并允许该值通过编译时的检查。</p><p>为了做到这一点，你可以使用 <code>any</code> 类型。<strong><code>any</code>类型允许你将任何类型的值分配给一个变量</strong>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// json may come from a third-party API</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> json </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">{&quot;latitude&quot;: 10.11, &quot;longitude&quot;:12.12}</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// parse JSON to find location</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> currentLocation </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(json)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(currentLocation)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>输出：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">latitude</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10.11</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">longitude</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">12.12</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在这个例子中，<code>currentLocation</code> 变量被分配给 <code>JSON.parse()</code> 函数返回的一个对象。</p><p>然而，当你使用 <code>currentLocation</code> 来访问对象属性时，TypeScript 也不会进行任何检查</p><p>输出：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">undefined</span></span>
<span class="line"></span></code></pre></div><p><strong>TypeScript 编译器并没有抱怨或发出任何错误</strong>。</p><p><strong><code>any</code> 类型为你提供了一种与现有 JavaScript 代码库合作的方式。它允许你在编译过程中逐渐选择加入和退出类型检查。因此，你可以使用 <code>any</code> 类型将一个 JavaScript 项目迁移到 TypeScript 上。</strong></p><h2 id="typescript-any-隐式类型" tabindex="-1">TypeScript any：隐式类型 <a class="header-anchor" href="#typescript-any-隐式类型" aria-hidden="true">#</a></h2><p>如果你声明一个变量而没有指定类型，TypeScript 会假定你使用 any 类型。这个功能被称为<a href="./type-inference.html">类型推断</a>。基本上，TypeScript 会猜测变量的类型。比如说：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><strong>在这个例子中，TypeScript 为你推断了类型。这种做法被称为隐式类型化。</strong></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注意，要禁用隐式类型转换为 <code>any</code> 类型，你要把 <code>tsconfig.json</code> 文件中的 <code>noImplicitAny</code> 选项改为 <code>true</code>。你将在后面的教程中学习更多关于 <code>tsconfig.json</code> 的内容。</p></div><h2 id="typescript-any-vs-object" tabindex="-1">TypeScript any vs. object <a class="header-anchor" href="#typescript-any-vs-object" aria-hidden="true">#</a></h2><p>如果你用 <code>any</code> 类型声明一个变量，你也可以给它分配任何值。</p><p>但是，你不能对它调用一个方法，即使这个方法实际存在。比如说。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10.123</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">willExist</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"></span></code></pre></div><p>在这个例子中，<strong>即使 <code>willExist()</code> 方法在编译时不存在，TypeScript 编译器也不会发出任何警告，因为 <code>willExist()</code> 方法在运行时可能可用</strong>。</p><p>然而，如果你把 <code>result</code> 变量的类型改为 <code>object</code>，TypeScript 编译器会发出错误：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10.123</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Error：</p><p style="text-decoration:line-through;">error TS2339: Property &#39;toFixed&#39; does not exist on type &#39;object&#39;.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Type </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> is not assignable to type </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span></span>
<span class="line"></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>TypeScript 的 <code>any</code> 类型允许你存储任何类型的值。它指示编译器跳过类型检查。</li><li>使用 <code>any</code> 类型来存储一个你在编译时不知道其类型的值，或者当你把一个 JavaScript 项目迁移到 TypeScript 项目时。</li></ul>`,32),t=[l];function o(c,r,i,y,d,F){return n(),a("div",null,t)}const A=s(p,[["render",o]]);export{C as __pageData,A as default};

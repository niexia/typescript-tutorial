import{_ as s,c as n,o as a,a as l}from"./app.cde3d90f.js";const d=JSON.parse('{"title":"TypeScript 类型推断","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本类型推断","slug":"基本类型推断","link":"#基本类型推断","children":[]},{"level":2,"title":"最佳的通用类型算法","slug":"最佳的通用类型算法","link":"#最佳的通用类型算法","children":[]},{"level":2,"title":"上下文类型推断","slug":"上下文类型推断","link":"#上下文类型推断","children":[]},{"level":2,"title":"类型推断 vs 类型注解","slug":"类型推断-vs-类型注解","link":"#类型推断-vs-类型注解","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"basis-types/type-inference.md"}'),p={name:"basis-types/type-inference.md"},e=l(`<h1 id="typescript-类型推断" tabindex="-1">TypeScript 类型推断 <a class="header-anchor" href="#typescript-类型推断" aria-hidden="true">#</a></h1><p>摘要：在这个教程中，你将学习 TypeScript 中的类型推断（type inference）。</p><p><strong>类型推断描述了当你没有明确注解类型时，TypeScript 在哪里以及如何推断类型。</strong></p><h2 id="基本类型推断" tabindex="-1">基本类型推断 <a class="header-anchor" href="#基本类型推断" aria-hidden="true">#</a></h2><p>当你声明一个变量时，你可以使用一个类型注解来明确指定它的类型。比如说：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> counter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>然而，<strong>如果你将<code>counter</code>变量初始化为一个数字，TypeScript 将推断计数器的类型为 <code>number</code></strong>。比如说：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> counter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>它等同于以下声明：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> counter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>同样地，当你给一个函数参数赋值时，TypeScript 会将参数的类型推断为默认值的类型。比如说：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setCounter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">max</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在这个例子中，TypeScript 推断<code>max</code>参数的类型是 <code>number</code>。</p><p>类似地，TypeScript 推断下面的<code>increment()</code>函数的返回类型为 <code>number</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">counter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>它和下面效果一样：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">counter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="最佳的通用类型算法" tabindex="-1">最佳的通用类型算法 <a class="header-anchor" href="#最佳的通用类型算法" aria-hidden="true">#</a></h2><p>考虑下面的赋值：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> items </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><strong>为了推断 <code>items</code> 变量的类型，TypeScript 需要考虑数组中每个元素的类型。</strong></p><p><strong>它使用最佳通用类型算法（common type algorithm）来分析每个候选类型，并选择与所有其他候选类型兼容的类型。</strong></p><p>在这种情况下，TypeScript 选择了数字数组类型（<code>number[]</code>）作为最佳通用类型。</p><p>如果你在<code>items</code>数组中添加一个字符串，TypeScript 将推断<code>items</code>的类型为 <code>number</code> 和 <code>string</code>的数组：<code>(number | string)[]</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> items </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hi</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><strong>当 TypeScript 无法找到最佳通用类型时，它会返回联合数组类型</strong>。比如说：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegExp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\d</span><span style="color:#C3E88D;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在这个例子中，TypeScript 推断<code>arr</code>的类型为<code>(RegExp | Date)[]</code>。</p><h2 id="上下文类型推断" tabindex="-1">上下文类型推断 <a class="header-anchor" href="#上下文类型推断" aria-hidden="true">#</a></h2><p><strong>TypeScript 使用变量的位置来推断它们的类型。这个机制被称为上下文类型推断（contextual typing）</strong>。例如：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">button</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>在这个例子中，TypeScript 知道 <code>event</code> 参数是<code>MouseEvent</code>的一个实例，因为是 <code>click</code> 事件。</p><p>然而，当你把<code>click</code>事件改为 <code>scroll</code> 事件时，TypeScript 会发出一个错误：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">scroll</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">button</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// compiler error</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Error：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Property </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> does not exist on type </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Event</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2339</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>TypeScript 知道在这种情况下，事件是一个<code>UIEvent</code>的实例，而不是一个<code>MouseEvent</code>。而<code>UIEvent</code>没有<code>button</code>属性，因此，TypeScript 抛出了一个错误。</p><h2 id="类型推断-vs-类型注解" tabindex="-1">类型推断 vs 类型注解 <a class="header-anchor" href="#类型推断-vs-类型注解" aria-hidden="true">#</a></h2><p>下面展示了类型推断和类型注解之间的区别：</p><table><thead><tr><th>Type inference 类型推断</th><th>Type annotations 类型注解</th></tr></thead><tbody><tr><td>TypeScript 猜测类型</td><td>你明确告诉 TypeScript 类型</td></tr></tbody></table><p><strong>在实践中，你应该尽可能地使用类型推断。以下情况下你应该使用类型注解：</strong></p><ul><li><strong>当你声明一个变量，但稍后再给它赋值时。</strong></li><li><strong>当你需要一个不能被推断的变量时。</strong></li><li><strong>当一个函数返回 <code>any</code> 类型，并且你需要澄清该值时。</strong></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>在初始化变量、设置参数默认值和确定函数返回类型时，TypeScript 会进行类型推断。</li><li>TypeScript 使用“最佳通用类型算法”选择最佳候选类型，这些类型与所有变量兼容。</li><li>TypeScript 还使用上下文类型推断，根据变量的位置来推断变量的类型。</li></ul>`,44),o=[e];function t(c,r,y,i,D,C){return a(),n("div",null,o)}const A=s(p,[["render",t]]);export{d as __pageData,A as default};

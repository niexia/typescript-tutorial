import{_ as s,c as e,o as a,a as n}from"./app.066eee89.js";const A=JSON.parse('{"title":"TypeScript void type","description":"","frontmatter":{},"headers":[{"level":2,"title":"TypeScript void 类型介绍","slug":"typescript-void-类型介绍","link":"#typescript-void-类型介绍","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"relativePath":"basis-types/void-type.md"}'),o={name:"basis-types/void-type.md"},l=n(`<h1 id="typescript-void-type" tabindex="-1">TypeScript void type <a class="header-anchor" href="#typescript-void-type" aria-hidden="true">#</a></h1><p>摘要：在本教程中，你将了解 TypeScript 的 <code>void</code> 类型，以及如何使用它作为不返回任何值的函数的返回类型。</p><h2 id="typescript-void-类型介绍" tabindex="-1">TypeScript void 类型介绍 <a class="header-anchor" href="#typescript-void-类型介绍" aria-hidden="true">#</a></h2><p><strong><code>void</code> 类型表示根本不存在任何类型。它有点像 <a href="./any-type.html"><code>any</code> 类型</a>的反面。</strong></p><p>通常情况下，你使用 void 类型作为不返回值的函数的返回类型，比如说：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">log</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">messsage</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><strong>将 <code>void</code> 类型作为不返回任何值的函数或方法的返回类型是一种良好的编程实践。这样做可以获得以下好处：</strong></p><ul><li><strong>提高代码的清晰度：你无需阅读整个函数体来确定它是否返回任何内容。</strong></li><li><strong>确保类型安全：你永远不会将 <code>void</code> 返回类型的函数赋值给变量。</strong></li></ul><p>注意，<strong>如果你将 <code>void</code> 类型用于变量，你只能将 <code>undefined</code> 赋值给该变量。在这种情况下，<code>void</code> 类型是没有用处的</strong>。例如：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> useless</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span></span>
<span class="line"><span style="color:#A6ACCD;">useless </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// error</span></span>
<span class="line"></span></code></pre></div><p>如果没有指定 <code>-strictNullChecks</code> 标志，你可以把 <code>useless</code> 赋值为 <code>null</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">useless </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// OK if --strictNullChecks is not specified</span></span>
<span class="line"></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>使用 <code>void</code> 类型作为不返回任何值的函数的返回类型。</li></ul>`,14),p=[l];function t(c,i,r,d,y,C){return a(),e("div",null,p)}const h=s(o,[["render",t]]);export{A as __pageData,h as default};

import{_ as s,c as p,o as a,a as t}from"./app.5b445d45.js";const e="/typescript-tutorial/what-is-typescript-compiler.png",n="/typescript-tutorial/what-is-typescript-typescript-and-js.png",S=JSON.parse('{"title":"什么是 TypeScript","description":"","frontmatter":{},"headers":[{"level":2,"title":"TypeScript 介绍","slug":"typescript-介绍","link":"#typescript-介绍","children":[]},{"level":2,"title":"为什么选择 TypeScript","slug":"为什么选择-typescript","link":"#为什么选择-typescript","children":[{"level":3,"title":"1）TypeScript 提高了你的工作效率，同时有助于避免 bug 的出现","slug":"_1-typescript-提高了你的工作效率-同时有助于避免-bug-的出现","link":"#_1-typescript-提高了你的工作效率-同时有助于避免-bug-的出现","children":[]},{"level":3,"title":"2) TypeScript 将未来的 JavaScript 带到今天","slug":"_2-typescript-将未来的-javascript-带到今天","link":"#_2-typescript-将未来的-javascript-带到今天","children":[]}]}],"relativePath":"getting-start/what-is-typescript.md"}'),l={name:"getting-start/what-is-typescript.md"},c=t('<h1 id="什么是-typescript" tabindex="-1">什么是 TypeScript <a class="header-anchor" href="#什么是-typescript" aria-hidden="true">#</a></h1><p>摘要：在本教程中，你将了解什么是 TypeScript 以及它相对于普通 JavaScript 的优势。</p><h2 id="typescript-介绍" tabindex="-1">TypeScript 介绍 <a class="header-anchor" href="#typescript-介绍" aria-hidden="true">#</a></h2><p>TypeScript 是 JavaScript 的一个超集。</p><p>TypeScript 构建在 JavaScript 的基础上。首先，你编写 TypeScript 代码。然后，你使用 TypeScript 编译器将 TypeScript 代码编译成普通的 JavaScript 代码。</p><p>一旦你有了普通的 JavaScript 代码，你就可以把它部署到任何可以运行 JavaScript 的环境中。</p><p>TypeScript 文件使用 <code>.ts</code> 扩展名，而不是 JavaScript 文件的 <code>.js</code> 扩展名。</p><img src="'+e+'"><p>TypeScript 使用 JavaScript 的语法，并增加了额外的语法来支持 Types。</p><p>如果你有一个没有任何语法错误的 JavaScript 程序，它也是一个 TypeScript 程序。这意味着，所有的 JavaScript 程序都是 TypeScript 程序。如果你要将现有的 JavaScript 代码库迁移到 TypeScript，这非常有帮助。</p><p>下图显示了 TypeScript 和 JavaScript 之间的关系。</p><img src="'+n+`"><h2 id="为什么选择-typescript" tabindex="-1">为什么选择 TypeScript <a class="header-anchor" href="#为什么选择-typescript" aria-hidden="true">#</a></h2><p>TypeScript 的主要目标是：</p><ul><li>将可选类型引入到 JavaScript 中。</li><li>实现未来 JavaScript 的计划特性，又称 ECMAScript Next 或 ES Next 到当前的 JavaScript。</li></ul><h3 id="_1-typescript-提高了你的工作效率-同时有助于避免-bug-的出现" tabindex="-1">1）TypeScript 提高了你的工作效率，同时有助于避免 bug 的出现 <a class="header-anchor" href="#_1-typescript-提高了你的工作效率-同时有助于避免-bug-的出现" aria-hidden="true">#</a></h3><p>类型通过帮助你避免许多错误来提高生产力。通过使用类型，你可以在编译时抓住错误，而不是在运行时发生错误。</p><p>下面的将两个数字 <code>x</code> 和 <code>y</code> 相加：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如果你从 HTML 输入元素中获取数值并将其传入函数，你可能会得到一个意外的结果。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(input1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> input2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(result)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// result of concatenating strings</span></span>
<span class="line"></span></code></pre></div><p>例如，如果用户输入 10 和 20，<code>add()</code>函数将返回 1020，而不是 30。</p><p>原因是 input1.value 和 input2.value 是字符串，而不是数字。当你使用运算符 + 来添加两个字符串时，它将它们串联成一个字符串。</p><p>当你使用 TypeScript 为参数明确指定类型时，像这样。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>在这个函数中，我们将数字类型添加到参数中。函数 add() 只接受数字，不接受任何其他值。</p><p>当你按以下方式调用该函数时。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(input1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> input2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>...如果你将 TypeScript 代码编译成 JavaScript，TypeScript 编译器会发出错误。因此，你可以防止错误在运行时发生。</p><h3 id="_2-typescript-将未来的-javascript-带到今天" tabindex="-1">2) TypeScript 将未来的 JavaScript 带到今天 <a class="header-anchor" href="#_2-typescript-将未来的-javascript-带到今天" aria-hidden="true">#</a></h3><p>TypeScript 支持当前 JavaScript 引擎的 ES Next 中计划的即将到来的功能。这意味着你可以在网络浏览器（或其他环境）完全支持新的 JavaScript 功能之前使用这些功能。</p><p>每年，TC39 都会为 ECMAScript 发布一些新功能，ECMAScript 是 JavaScript 的标准。这些功能提案通常要经过五个阶段。</p><ul><li>Stage 0: Strawperson</li><li>Stage 1: Proposal</li><li>Stage 2: Draft</li><li>Stage 3: Candidate</li><li>Stage 4: Finished</li></ul><p>而 TypeScript 一般支持处于第三阶段的功能。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>TypeScript 编译器在编译的时候，将 ES Next 的代码编译成相应版本的代码，例如 ES5 代码，取决于在 <code>tsconfig.ts</code> 文件中配置的 <code>target</code>，默认输出 ES3。</p><p>ESNext 是一个动态的概念，指的是 ECMAScript 的下一个版本。一个新的 JavaScript 语法，到了最后一个定案阶段 (Stage 4)，那么就包含在下一个发布的 ECMAScript 标准。</p><p>举个例子，今年是 2022 年，我们现在用的 ECMASCript 版本是 ES2022，下一个版本是 ES2023，这个版本会在明年的 6 月份正式发布（每年都是这个时候），<strong>在 ES2023 发布之前，已经到定案阶段 (Stage 4) 的提案，就是目前的 ESNext</strong>。</p></div>`,35),o=[c];function r(i,y,d,D,C,A){return a(),p("div",null,o)}const u=s(l,[["render",r]]);export{S as __pageData,u as default};

import{_ as t,c as e,o as i,a}from"./app.5b445d45.js";const f=JSON.parse('{"title":"TypeScript Tutorial","description":"","frontmatter":{},"headers":[],"relativePath":"index.md"}'),l={name:"index.md"},s=a('<h1 id="typescript-tutorial" tabindex="-1">TypeScript Tutorial <a class="header-anchor" href="#typescript-tutorial" aria-hidden="true">#</a></h1><blockquote><ul><li>在线阅读 <a href="https://niexia.github.io/typescript-tutorial/" target="_blank" rel="noreferrer">https://niexia.github.io/typescript-tutorial/</a></li><li>英文原版 <a href="https://www.typescripttutorial.net/" target="_blank" rel="noreferrer">https://www.typescripttutorial.net/</a></li></ul></blockquote><p>TypeScript 是类型化的 JavaScript。TypeScript 将类型添加到 JavaScript 中，通过在运行 JavaScript 代码之前捕捉错误来帮助你加快开发速度。</p><p>TypeScript 是一种开源的编程语言，建立在 JavaScript 之上。它可以在任何浏览器、任何操作系统、任何运行 JavaScript 的环境中使用。</p><p>在这个 TypeScript 教程中，你将学习：</p><ul><li>为什么 TypeScript 比 JavaScript 有很多好处。</li><li>了解 TypeScript 的真正含义，以及它是如何在引擎下工作的。</li><li>使用 TypeScript 及其丰富的功能，如类型、类、接口、模块，以及更多。 前提条件</li></ul><p>要学习本教程，你需要具备以下条件：</p><ul><li>基本的 JavaScript 知识。如果你想学习 JavaScript，请查看<a href="https://www.javascripttutorial.net/" target="_blank" rel="noreferrer">JavaScript Tutorial</a>。</li><li><a href="https://www.javascripttutorial.net/es6/" target="_blank" rel="noreferrer">ECMAScript 2015 或 ES6</a>知识。</li></ul><details class="details custom-block"><summary>第 1 节 Getting Start</summary><ul><li><a href="./getting-start/what-is-typescript.html">什么是 TypeScrip</a> - 了解什么是 TypeScript 以及它相对于普通 JavaScript 的优势。</li><li><a href="./getting-start/typescript-setup.html">TypeScript 开发环境设</a> - 告诉你如何设置 TypeScript 开发环境，以提高 TypeScript 的工作效率。</li><li><a href="./getting-start/typescript-hello-world.html">TypeScript “Hello World!”</a> - 指导你完成在 TypeScript 中创建第一个名为 Hello, World 的程序的步骤。</li><li><a href="./getting-start/why-typescript.html">为什么选择 TypeScrip</a> - 清楚地了解为什么要使用 TypeScript。</li></ul></details><details class="details custom-block"><summary>第 2 节 Basic Types</summary><ul><li><a href="./basis-types/typescript-types.html">TypeScript 类型</a> - 学习如何使用类型注解来定义变量、函数参数和返回值的静态类型。</li><li><a href="./basis-types/type-annotations.html">类型注解</a> - 学习 TypeScript 中的类型注解（type annotations)</li><li><a href="./basis-types/type-inference.html">类型推断</a> - 向你介绍 TypeScript 中的类型推断（type inference）</li><li><a href="./basis-types/number-type.html">number 类型</a> - 学习数字类型，包括浮点数字和大整数。</li><li><a href="./basis-types/string-type.html">string 类型</a> - 告诉你如何在 TypeScript 中使用字符串类型。</li><li><a href="./basis-types/boolean-type.html">boolean 类型</a> - 指导你了解布尔类型以及如何有效地使用它。</li><li><a href="./basis-types/object-type.html">object 类型</a> - 向你介绍代表非原始值的对象类型。</li><li><a href="./basis-types/array-type.html">array 类型</a> - 告诉你如何使用数组及其操作。</li><li><a href="./basis-types/tuple-types.html">tuple 类型</a> - 学习如何在元组中存储已知类型的固定数量的元素。</li><li><a href="./basis-types/enum-types.html">enum 类型</a> - 告诉你如何通过使用枚举类型来定义一组命名的常量。</li><li><a href="./basis-types/any-type.html">any 类型</a> - 学习如何使用任意类型在一个变量中存储任意类型的值。</li><li><a href="./basis-types/void-type.html">void 类型</a> - 告诉你如何使用 void 类型作为不返回任何值的函数的返回类型。</li><li><a href="./basis-types/never-type.html">never 类型</a> - 学习如何使用不包含任何值的 never 类型。</li><li><a href="./basis-types/union-type.html">union 类型</a> - 指导你如何用联合类型在一个变量中存储一个或几个类型的值。</li><li><a href="./basis-types/type-aliases.html">类型别名</a> - 告诉你如何使用类型别名为类型定义新的名称。</li><li><a href="./basis-types/string-literal-types.html">字符串字面类型</a> - 学习如何定义一个只接受指定字符串字面的类型。</li></ul></details><details class="details custom-block"><summary>第 3 节 Control Flow Statements</summary><ul><li><a href="./control-flow-statements/typescript-if-else.html">if else</a> - 学习如何根据一个条件来执行代码。</li><li><a href="./control-flow-statements/typescript-switch-case.html">switch case</a> - 告诉你如何使用 switch 语句来允许一些可能的执行路径。</li><li><a href="./control-flow-statements/typescript-for.html">for</a> - 创建一个执行指定次数的循环。</li><li><a href="./control-flow-statements/typescript-while.html">while</a> - 创建一个预测循环，只要一个条件为真就执行。</li><li><a href="./control-flow-statements/typescript-do-while.html">do while</a> - 学习如何创建一个后测循环，执行到一个条件为假。</li><li><a href="./control-flow-statements/typescript-break.html">break</a> - 告诉你如何使用 break 语句来终止一个循环或一个 switch。</li><li><a href="./control-flow-statements/typescript-continue.html">continue</a> - 学习如何跳到循环的末端并继续下一次迭代。</li></ul></details><details class="details custom-block"><summary>第 4 节 Functions</summary><ul><li><a href="./functions/typescript-functions.html">函数</a> - 学习如何在 TypeScript 中声明一个使用类型注解的函数。</li><li><a href="./functions/typescript-function-types.html">函数类型</a> - 指导你如何使用函数类型来定义函数的类型。</li><li><a href="./functions/typescript-optional-parameters.html">可选参数</a> - 告诉你如何用可选参数定义函数。</li><li><a href="./functions/typescript-default-parameters.html">默认参数</a> - 向你介绍默认参数。</li><li><a href="./functions/typescript-rest-parameters.html">Rest 参数</a> - 使用 rest 参数来处理函数的无限数量的参数。</li><li><a href="./functions/typescript-function-overloadings.html">函数重载</a> - 学习如何通过函数重载在参数类型和函数结果之间建立联系。</li></ul></details><details class="details custom-block"><summary>第 5 节 Classes</summary><ul><li><a href="./class/typescript-class.html">类</a> - 学习如何在 TypeScript 中构建一个类。</li><li><a href="./class/typescript-access-modifiers.html">访问修饰符</a> - 向你介绍私有、保护和公共访问修饰符。</li><li><a href="./class/typescript-readonly.html">只读属性</a> - 学习如何使用 readonly 修饰符来使类的属性不可改变。</li><li><a href="./class/typescript-getters-setters.html">Getters 和 Setters</a> - 告诉你如何使用 getters 和 setters 来控制类属性的访问。</li><li><a href="./class/typescript-inheritance.html">继承</a> - 学习如何使用继承来重复使用另一个类的功能。</li><li><a href="./class/typescript-static-methods-and-properties.html">静态方法和属性</a> - 定义类的所有实例共享的静态方法和变量。</li><li><a href="./class/typescript-abstract-classes.html">抽象类</a> - -解释定义一些常见行为的抽象类。</li></ul></details><details class="details custom-block"><summary>第 6 节 Interfaces</summary><ul><li><a href="./interfaces/typescript-interface.html">接口</a> - 向你介绍接口以及如何使用它们在你的代码中创建契约。</li><li><a href="./interfaces/typescript-extend-interface.html">扩展接口</a> - 学习如何扩展一个接口以创建一个接口的组合。</li></ul></details><details class="details custom-block"><summary>第 7 节 Advanced Types</summary><ul><li><a href="./advanced-types/typescript-intersection-types.html">交叉类型</a> - 告诉你如何创建一个具有现有类型所有特征的新类型。</li><li><a href="./advanced-types/typescript-type-guards.html">类型守卫</a> - 学习如何使用类型守卫来缩小条件块中变量的类型。</li><li><a href="./advanced-types/type-casting.html">类型转换</a> - 告诉你如何使用类型转换将一种类型的变量转换为另一种类型。</li><li><a href="./advanced-types/type-assertions.html">类型断言</a> - 指导你如何使用类型断言来告诉编译器将一个值视为指定的类型。</li></ul></details><details class="details custom-block"><summary>第 8 节 Generics</summary><ul><li><a href="./generics/typescript-generics.html">Typescript 泛型</a> - 学习如何使用 TypeScript 泛型来开发泛型函数。</li><li><a href="./generics/typescript-generic-constraints.html">泛型约束</a> - 告诉你如何为泛型类型添加约束。</li><li><a href="./generics/typescript-generic-classes.html">泛型类</a> - 指导你如何开发泛型类。</li><li><a href="./generics/typescript-generic-interfaces.html">泛型接口</a> - 引导你完成创建泛型接口的步骤。</li></ul></details><details class="details custom-block"><summary>第 9 节 Modules</summary><ul><li><a href="./modules/typescript-modules.html">TypeScript 模块</a> - 向您介绍 TypeScript 中的模块以及如何在其他模块中使用它们。</li></ul></details><details class="details custom-block"><summary>TypeScript in Node.js</summary><ul><li><a href="./type-in-nodejs/nodejs-typescript.html">Node.js TypeScript</a> - 如何设置在 Node.js 项目中使用 TypeScript 的开发环境。</li></ul></details>',18),r=[s];function p(c,n,o,y,h,m){return i(),e("div",null,r)}const d=t(l,[["render",p]]);export{f as __pageData,d as default};

import{_ as s,c as a,o as n,a as o}from"./app.cde3d90f.js";const p="/typescript-tutorial/nodejs-typescript-directory-structure.png",e="/typescript-tutorial/nodejs-typescript-app.ts_.png",l="/typescript-tutorial/nodejs-typescript-app.js.png",A=JSON.parse('{"title":"Node.js Typescript: How to Automate the Development Workflow","description":"","frontmatter":{},"headers":[{"level":2,"title":"创建项目结构","slug":"创建项目结构","link":"#创建项目结构","children":[]},{"level":2,"title":"配置 TypeScript 编译器","slug":"配置-typescript-编译器","link":"#配置-typescript-编译器","children":[]},{"level":2,"title":"安装 Node.js 模块","slug":"安装-node-js-模块","link":"#安装-node-js-模块","children":[]}],"relativePath":"type-in-nodejs/nodejs-typescript.md"}'),t={name:"type-in-nodejs/nodejs-typescript.md"},c=o('<h1 id="node-js-typescript-how-to-automate-the-development-workflow" tabindex="-1">Node.js Typescript: How to Automate the Development Workflow <a class="header-anchor" href="#node-js-typescript-how-to-automate-the-development-workflow" aria-hidden="true">#</a></h1><p>摘要：在本教程中，你将学习如何将在 Node.js 项目中使用 TypeScript 的开发工作流程自动化。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本教程假定你的系统中已经安装了 node.js 和 tsc 模块。</p></div><h2 id="创建项目结构" tabindex="-1">创建项目结构 <a class="header-anchor" href="#创建项目结构" aria-hidden="true">#</a></h2><p>首先，创建一个名为 <code>nodets</code> 的新目录。</p><p>其次，在 <code>nodets</code> 下创建两个子目录，称为 <code>build</code> 和 <code>src</code>，像这样：</p><img src="'+p+`"><p>你将在 <code>src</code> 目录下存储 <code>TypeScript</code> 代码。</p><p>一旦 TypeScript 编译器编译了 TypeScript 源文件，它将把输出文件存储在 build 目录中。</p><h2 id="配置-typescript-编译器" tabindex="-1">配置 TypeScript 编译器 <a class="header-anchor" href="#配置-typescript-编译器" aria-hidden="true">#</a></h2><p>从 macOS 和 Linux 的终端或 Windows 的命令提示符，在 <code>nodets</code> 目录下运行以下命令，创建 <code>tsconfig.json</code> 文件：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-init</span></span>
<span class="line"></span></code></pre></div><p>你会看到在 <code>nodets</code> 目录下创建的 <code>tsconfig.json</code>。</p><p><code>tsconfig.json</code> 文件表明该目录（<code>nodets</code>）是 TypeScript 项目的根目录。</p><p>当你编译 TypeScript 文件时，TypeScript 编译器将使用 <code>tsconfig.json</code> 中的选项来编译该项目。</p><p>现在，你可以打开 <code>tsconfig.json</code> 文件。有很多选项。在本教程中，你将专注于这两个选项：</p><ul><li><code>rootdir</code> - 指定 TypeScript 输入文件的根目录。</li><li><code>outdir</code> - 存放 JavaScript 输出文件。</li></ul><p>这些选项默认是有注释的。而你需要取消注释（去掉行首的//），并对它们进行如下修改。</p><p>对于 <code>outDir</code> 选项：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">outDir</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./build</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>对于 <code>rootDir</code> 选项：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rootDir</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>为了验证新的配置，你可以在 <code>./src</code> 目录下创建一个名为 <code>app.ts</code> 的新文件并放置以下代码：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Node.js TypeScript</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><img src="`+e+`"><p>然后运行以下命令来执行 TypeScript 编译器。它将编译存储在 <code>src</code> 目录中的所有文件：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">tsc</span></span>
<span class="line"></span></code></pre></div><p>如果配置正确，你会看到在 <code>./build</code> 目录下生成的 <code>app.js</code>：</p><img src="`+l+`"><p>要运行 app.js，你要导航到 <code>build</code> 目录并执行以下命令：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">app.js</span></span>
<span class="line"></span></code></pre></div><p>你将看到下面的输出内容：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js TypeScript</span></span>
<span class="line"></span></code></pre></div><p>每次当你改变 TypeScript 代码时，你都需要：</p><ul><li>构建项目。</li><li>运行 JavaScript 输出文件。</li></ul><p><strong>这是很耗时的。</strong></p><p>幸运的是，你可以使用一些 Node.js 模块来自动完成整个过程。</p><h2 id="安装-node-js-模块" tabindex="-1">安装 Node.js 模块 <a class="header-anchor" href="#安装-node-js-模块" aria-hidden="true">#</a></h2><p><code>nodemon</code> 模块允许你在改变 JavaScript 源代码时自动重新启动应用程序。</p><p><code>concurrently</code> 模块可以同时运行多个命令。</p><p>首先，在项目的根目录下执行 <code>npm init</code> 命令：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--yes</span></span>
<span class="line"></span></code></pre></div><p>接下来，安装 nodemon 和 concurrently 模块：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">nodemon</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">concurrently</span></span>
<span class="line"></span></code></pre></div><p>这将需要一些时间来安装。一旦安装完成。</p><p><strong>注意，<code>-g</code> 标志将指示 npm 全局安装这两个模块。这允许你在其他项目中使用它们。</strong></p><p>然后，打开 <code>package.json</code> 文件，你会在 <code>scripts</code> 选项中看到这样的东西：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">...  </span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">echo </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">Error: no test specified</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;"> &amp;&amp; exit 1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span></code></pre></div><p>之后，将脚本选项改为以下内容：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">start:build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tsc -w</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">start:run</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nodemon build/app.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">concurrently npm:start:*</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">...</span></span>
<span class="line"></span></code></pre></div><p>这个 <code>&quot;start:build&quot;: &quot;tsc -w&quot;</code> 将会监听 <code>./src</code> 目录中的更改并自动编译它们。</p><p>这个 <code>&quot;start:run&quot;: &quot;nodemon build/app.js&quot;</code> 会在生成新文件时自动运行 <code>./build</code> 目录下的 <code>app.js</code>。</p><p>这个 <code>&quot;start&quot;: &quot;concurrently npm:start:*&quot;</code> 运行所有以 <code>npm:start:*</code> 开头的命令，执行上述 <code>start:build</code> 和 <code>start:run</code> 命令。</p><p>由于 <code>app.js</code> 将是 Node.js 程序的入口点，你还需要更改 <code>package.json</code> 文件中以下选项为 <code>app.js</code>：</p><p>从：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>到：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>最后，执行以下命令：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span></span>
<span class="line"></span></code></pre></div><p>为了验证配置，你需要在 <code>app.ts</code> 文件中更改一些代码。然后你将在控制台中看到输出结果。</p><p>通过本教程，你已经学会如何为 Node.js 项目设置 TypeScript 的开发工作流程。</p>`,62),r=[c];function i(d,y,D,u,C,F){return n(),a("div",null,r)}const g=s(t,[["render",i]]);export{A as __pageData,g as default};
